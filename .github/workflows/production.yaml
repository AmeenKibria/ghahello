name: Production release and deploy

on:
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag version (e.g. 1.x.x)"
        required: true
        default: ''

jobs:
  build:

    runs-on: self-hosted
    timeout-minutes: 5
    if: ${{ github.event.inputs.tag != '' }}


    steps:
      - name: Print the tag
        run: echo "Starting to release with tag -> ${{ github.event.inputs.tag }}"
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn -B package --file pom.xml
           
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1


      - name: Docker Meta 
        id:  docker_meta
        uses: crazy-max/ghaction-docker-meta@v2
        with:
          images: ameendocker/testapp
          tags: |
            ${{ github.event.inputs.tag }}
          labels: |
            org.opencontainers.image.authors=test/ASPA
            org.opencontainers.image.vendor=jyu

      - name: Build image
        uses: docker/build-push-action@v2
        with:
          context: .
          no-cache: false
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          build-args: |
            COMMIT_SHA=${{ github.sha }}
            
            
# Thease are not needed for tagging
#      - name: Create tag
#        uses: actions/github-script@v3
 #       with:
  #            github-token: ${{ secrets.GITHUB_TOKEN }}
   #           script: |
    #            github.git.createRef({
     #             owner: context.repo.owner,
      #           ref: "refs/tags/${{ github.event.inputs.tag }}",
       #           sha: context.sha
        #        })

    
